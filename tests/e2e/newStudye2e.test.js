const puppeteer = require("puppeteer");
const path = require("path");
require("jest");


describe("Create New Study E2E", () => {
  let browser;
  let page;

  beforeAll(async () => {
    //open browser
    browser = await puppeteer.launch({ headless: false });
    //new page
    page = await browser.newPage();
    //go to login page:
    await page.goto("http://localhost:5173/login");
  });

  afterAll(async () => {
    //close the browser
    await browser.close();
  });

  test("Log in and create a new study", async () => {
    try {
      await page.waitForSelector('input[name="email"]');
      await page.type('input[name="email"]', "testmail@gmail.com");
      //enter incorrect password:
      await page.type('input[name="password"]', "wrongPassword");
      await page.click("._login__container__form__button_1o4z7_42");
      //wait for incorrect element to appear
      await page.waitForSelector('#login__error');
      //check if login failed:
      const errMsg = await page.$eval('#login__error', el => el.textContent);
      expect(errMsg).toBe("Login failed");
      //clear the password field:
      await page.click('input[name="password"]', { clickCount: 3 });
      await page.keyboard.press('Backspace');
      
      //enter correct password
      await page.type('input[name="password"]', "Password12345");
      await page.click("._login__container__form__button_1o4z7_42");
      await page.waitForNavigation({ waitUntil: "networkidle2" });

      // Assert URL or selector to confirm login
      await page.waitForSelector("#nav__button--newstudy");
      expect(page.url()).toContain("/dashboard");

      // Create new study
      await page.click("#nav__button--newstudy");
      await page.waitForSelector("#newproject__container");
      await page.type('input[name="title"]', "My Study Title");
      await page.type(
        "textarea",
        "this is a test project generated by Jest E2E"
      );
      await page.click("#newProject__submit");
      await page.waitForSelector("#addQuestion__btn");
      expect(page.url()).toContain("/create_study/");

      // Add question 1
      let inputs = await page.$$('input[name="questiontext"]');
      await inputs[0].type("how do you feel?");
      const value1 = await page.evaluate((el) => el.value, inputs[0]);
      expect(value1).toBe("how do you feel?");

      // Add question 2
      await page.click("#addQuestion__btn");
      await page.waitForFunction(() => {
        return document.querySelectorAll('input[name="questiontext"]').length >= 2;
      });
      inputs = await page.$$('input[name="questiontext"]');
      await inputs[1].type("What artifact do you prefer?");

      // Set question type
      let questionTypes = await page.$$('select[name="questionType"]');
      await questionTypes[1].select("MultipleChoice");
      const qType = await page.evaluate((el) => el.value, questionTypes[1]);
      expect(qType).toBe("MultipleChoice");

      // Add alternatives
      await page.type("input[name=alternative-0]", "Image 1");
      await page.click(".addAlternative");
      await page.waitForSelector("input[name=alternative-1]");
      await page.type("input[name=alternative-1]", "Image 2");

      const alt1 = await page.$("input[name=alternative-0]");
      const alt2 = await page.$("input[name=alternative-1]");
      expect(await page.evaluate((el) => el.value, alt1)).toBe("Image 1");
      expect(await page.evaluate((el) => el.value, alt2)).toBe("Image 2");

      //add question 3 to section:
      await page.click("#addQuestion__btn");

      inputs = await page.$$('input[name="questiontext"]');
      await inputs[2].type("On a scale from 1 to 7, how much do you like it?");
      value = inputs[2];
      const evaluateInput3 = await page.evaluate((input) => input.value, value);
      console.log("Value in Question 3:", evaluateInput3);

      //change question type:
      questionTypes = await page.$$('select[name="questionType"]');

      await questionTypes[2].select("SlidingScale");
      const evaluateQuestionType2 = await page.evaluate(
        (input) => input.value,
        questionTypes[2]
      );
      console.log("question 3 type:", evaluateQuestionType2);

      //wait for inputs to load;
      await page.waitForSelector('input[name="min"]');
      await page.waitForSelector('input[name="max"]');

      //input values:
      await page.type('input[name="min"]', "1");
      await page.type('input[name="max"]', "7");

      const minValue = await page.$('input[name="min"]');
      const maxValue = await page.$('input[name="max"]');

      const evalMinValue = await page.evaluate(
        (input) => input.value,
        minValue
      );
      const evalMaxValue = await page.evaluate(
        (input) => input.value,
        maxValue
      );

      console.log("Minimum value:", evalMinValue);
      console.log("Maximum value:", evalMaxValue);

      //upload artifacts
      await page.click("#uploadArtifact__button");
      //input field for fileupload
      const artifactInput = await page.$('input[type="file"]');
      //filepath
      const filePath = path.resolve(__dirname, "test.jpg");
      //upload the file
      await artifactInput.uploadFile(filePath);
      console.log("file was uploaded");
      //wait for artifact name to appear
      await page.waitForSelector('#artifact_name')
      //get the text content of element
      const artifactText = await page.$eval('#artifact_name', el => el.textContent);
      //check if the value is what we expect it to be
      expect(artifactText).toBe("Selected file: test.jpg");
      
      //publish quiz
      page.click("#publish__btn");
      await page.waitForSelector("#nav__button--newstudy");
      expect(page.url()).toContain("/dashboard");
    } catch (err) {
      console.log(err);
      throw Error(err);
    }
  });
});
